#!/usr/bin/env python3
import socket
import concurrent.futures
import subprocess

print(("""\


███╗   ███╗██╗       ██████╗  ██████╗ 
████╗ ████║██║      ██╔════╝ ██╔═══██╗
██╔████╔██║██║█████╗██║  ███╗██║   ██║
██║╚██╔╝██║██║╚════╝██║   ██║██║   ██║
██║ ╚═╝ ██║██║      ╚██████╔╝╚██████╔╝
╚═╝     ╚═╝╚═╝       ╚═════╝  ╚═════╝ 
                                      


                    """))


print("\n")
# Define the target host and port range to scan
target_host = input("Target Host: ")
target_port_range = input("Ports: ")
Nmapargs = input("Nmap Arguments : ")
port_list = []

# Parse the port range
start_port, end_port = map(int, target_port_range.split('-'))

print("\n")
print("┌─────────────────────────────────┐")

# Define a function to scan a single port
def scan_port(port):
    try:
        # Create a new socket object and attempt to connect to the target host on the current port
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(0.08)
            result = sock.connect_ex((target_host, port))
            
            # If the connection was successful, print the open port and attempt to determine the service running on it
            if result == 0:
                print(f" Port {port} ✅")
                port_list.append(port)

    except socket.error:
        pass

# Use multi-threading to scan all the ports
with concurrent.futures.ThreadPoolExecutor() as executor:
    executor.map(scan_port, range(start_port, end_port+1))

print("└─────────────────────────────────┘ \n \n \n")

print("   ▄   █▀▄▀█ ██   █ ▄▄")
print("    █  █ █ █ █ █  █   █")
print("██   █ █ ▄ █ █▄▄█ █▀▀▀")
print("█ █  █ █   █ █  █ █ ")
print("█  █ █    █     █  █")
print("█   ██   ▀     █    ▀ ")
print("              ▀    \n \n")
 

result = ",".join(str(x) for x in port_list)
command = ("nmap -Pn "+Nmapargs+ " " +target_host+" -p " + result)

# start the command in the background and capture its output
process = subprocess.Popen(command.split(), stdout=subprocess.PIPE, text=True)

# read and print the output of the command as it runs
while True:
    output = process.stdout.readline()
    if output == '' and process.poll() is not None:
        break
    if output:
        print(output.strip())
